# GitHub Actions workflow for building and deploying Hugo site to GitHub Pages
name: Build and Deploy Hugo Site

on:
  # Trigger on pushes to main branch
  push:
    branches:
      - main
    paths:
      - 'data/approved-messages.json'
      - 'content/**'
      - 'static/**'
      - 'config.yaml'
      - '.github/workflows/hugo.yml'

  # Allow manual triggering via repository dispatch (from approval interface)
  repository_dispatch:
    types: [rebuild-site]

  # Allow manual workflow execution
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: pages
  cancel-in-progress: false

# Default shell for all jobs
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.150.0
      NODE_VERSION: 22.18.0
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Create directory for user-specific executable files
        run: |
          mkdir -p "${HOME}/.local"

      - name: Install Hugo
        run: |
          curl -sLJO "https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          mkdir "${HOME}/.local/hugo"
          tar -C "${HOME}/.local/hugo" -xf "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          rm "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
          echo "${HOME}/.local/hugo" >> "${GITHUB_PATH}"

      - name: Verify installations
        run: |
          echo "Hugo: $(hugo version)"
          echo "Node.js: $(node --version)"

      - name: Install Node.js dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      - name: Process approved messages
        run: |
          # Create content generation script if it doesn't exist
          if [ ! -f "scripts/generate-content.js" ]; then
            echo "Content generation script not found, skipping message processing"
          else
            node scripts/generate-content.js
          fi

      - name: Configure Git
        run: |
          git config core.quotepath false

      - name: Install Hugo themes
        run: |
          # Install Ananke theme if not present
          if [ ! -d "themes/ananke" ]; then
            git clone https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
          fi

      - name: Cache restore
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys:
            hugo-

      - name: Build the site
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --cacheDir "${{ runner.temp }}/hugo_cache"

      - name: Cache save
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Cleanup job (optional)
  cleanup:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive processed messages
        run: |
          # Create archive directory if it doesn't exist
          mkdir -p data/archive

          # Move published messages to archive (script will be created later)
          if [ -f "scripts/archive-messages.js" ]; then
            node scripts/archive-messages.js
          fi

      - name: Commit archived messages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -n "$(git status --porcelain)" ]; then
            git add data/
            git commit -m "Archive processed messages [skip ci]" || exit 0
            git push
          fi
